<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NHunspell</name>
    </assembly>
    <members>
        <member name="T:NHunspell.Hunspell">
            <summary>
              Spell checking, morphological analysis and generation functions.
            </summary>
        </member>
        <member name="F:NHunspell.Hunspell.nativeDllIsReferenced">
            <summary>
            The native dll is referenced.
            </summary>
        </member>
        <member name="F:NHunspell.Hunspell.unmanagedHandle">
            <summary>
              The unmanaged handle of the native Hunspell object
            </summary>
        </member>
        <member name="M:NHunspell.Hunspell.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:NHunspell.Hunspell"/> class.
            </summary>
        </member>
        <member name="M:NHunspell.Hunspell.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.Hunspell"/> class.
            </summary>
            <param name="affFile">
            The affix file. 
            </param>
            <param name="dictFile">
            The dictionary file. 
            </param>
        </member>
        <member name="M:NHunspell.Hunspell.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.Hunspell"/> class.
            </summary>
            <param name="affFile">
            The affix file. 
            </param>
            <param name="dictFile">
            The dictionary file. 
            </param>
            <param name="key">
            The key for encrypted dictionaries. 
            </param>
        </member>
        <member name="M:NHunspell.Hunspell.#ctor(System.Byte[],System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.Hunspell"/> class.
            </summary>
            <param name="affixFileData">
            The affix file data. 
            </param>
            <param name="dictionaryFileData">
            The dictionary file data. 
            </param>
            <param name="key">
            The key for encrypted dictionaries. 
            </param>
            <remarks>
            Affix and dictionary data must be binary loaded Hunspell dictionaries.
            </remarks>
        </member>
        <member name="M:NHunspell.Hunspell.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.Hunspell"/> class.
            </summary>
            <param name="affixFileData">
            The affix file data. 
            </param>
            <param name="dictionaryFileData">
            The dictionary file data. 
            </param>
            <remarks>
            Affix and dictionary data must be binary loaded Hunspell dictionaries.
            </remarks>
        </member>
        <member name="M:NHunspell.Hunspell.Add(System.String)">
            <summary>
            Adds the specified word to the internal dictionary.
            </summary>
            <param name="word">
            The word to add. 
            </param>
            <returns>
            <c>true</c> if the word was successfully added, otherwise <c>false</c> 
            </returns>
            <remarks>
            The word is NOT added to the dictionary file or data or stored in some way. It is only added to the internal data of the current <see cref="T:NHunspell.Hunspell"/> class. You must store your user dictionary elsewhere and Add() all words every time you create a new <see cref="T:NHunspell.Hunspell"/> object.
            </remarks>
        </member>
        <member name="M:NHunspell.Hunspell.AddWithAffix(System.String,System.String)">
            <summary>
            Adds the specified word to the internal dictionary. Determines the affixes from the provided sample.
            </summary>
            <param name="word">
            The word in stem form 
            </param>
            <param name="example">
            The example in stem form 
            </param>
            <returns>
            <c>true</c> if the word was successfully added, otherwise <c>false</c> 
            </returns>
            <remarks>
            <para>
            The affixiation is determined by the example. The added word should have the stem form
            </para>
            <para>
            The word is NOT added to the dictionary file or data or stored in some way.
                                                                                                                    It is only added to the internal data of the current
                                                                                                                    <see cref="T:NHunspell.Hunspell"/>
                                                                                                                    class.
                                                                                                                    You must store your user dictionary elsewhere and Add() all words every time you create a new
                                                                                                                    <see cref="T:NHunspell.Hunspell"/>
                                                                                                                    object.
            </para>
            </remarks>
            <example>
            bool spellBefore = hunspell.Spell("phantasos"); spellBefore = hunspell.Spell("phantasoses"); add = hunspell.AddWithAffix("phantasos","fish"); // this fantasy word is affixed like the word fish ( plural es ...) spellAfter = hunspell.Spell("phantasos"); spellAfter = hunspell.Spell("phantasoses"); // the plural (like fish) is also correct
            </example>
        </member>
        <member name="M:NHunspell.Hunspell.Analyze(System.String)">
            <summary>
            Analyzes the specified word.
            </summary>
            <param name="word">
            The word to analyze. 
            </param>
            <returns>
            List of stems and the according morphology 
            </returns>
        </member>
        <member name="M:NHunspell.Hunspell.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:NHunspell.Hunspell.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="callFromDispose">
            The call From Dispose.
            </param>
        </member>
        <member name="M:NHunspell.Hunspell.Generate(System.String,System.String)">
            <summary>
            Generates the specified word by a sample.
            </summary>
            <param name="word">
            The word. 
            </param>
            <param name="sample">
            The sample. 
            </param>
            <returns>
            The <see cref="!:List"/>.
            </returns>
        </member>
        <member name="M:NHunspell.Hunspell.Load(System.String,System.String)">
            <summary>
            Loads the specified affix and dictionary file.
            </summary>
            <param name="affFile">
            The affix file. 
            </param>
            <param name="dictFile">
            The dictionary file. 
            </param>
        </member>
        <member name="M:NHunspell.Hunspell.Load(System.String,System.String,System.String)">
            <summary>
            Loads the specified affix and dictionary file.
            </summary>
            <param name="affFile">
            The affix file. 
            </param>
            <param name="dictFile">
            The dictionary file. 
            </param>
            <param name="key">
            The key for encrypted dictionaries. 
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
            </exception>
        </member>
        <member name="M:NHunspell.Hunspell.Load(System.Byte[],System.Byte[])">
            <summary>
            Loads the specified affix and dictionary data.
            </summary>
            <param name="affixFileData">
            The affix file data. 
            </param>
            <param name="dictionaryFileData">
            The dictionary file data. 
            </param>
        </member>
        <member name="M:NHunspell.Hunspell.Load(System.Byte[],System.Byte[],System.String)">
            <summary>
            Loads the specified affix and dictionary data.
            </summary>
            <param name="affixFileData">
            The affix file data. 
            </param>
            <param name="dictionaryFileData">
            The dictionary file data. 
            </param>
            <param name="key">
            The key for encrypted dictionaries. 
            </param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:NHunspell.Hunspell.Remove(System.String)">
            <summary>
            Removes the specified word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            <c>true</c> if the word was successfully removed, otherwise <c>false</c> 
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Dictionary is not loaded
            </exception>
        </member>
        <member name="M:NHunspell.Hunspell.Spell(System.String)">
            <summary>
            Spell check the word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            <c>true</c> if word is correct, <c>false</c> otherwise 
            </returns>
        </member>
        <member name="M:NHunspell.Hunspell.Stem(System.String)">
            <summary>
            Gets the word stems for the specified word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            List of word stems 
            </returns>
        </member>
        <member name="M:NHunspell.Hunspell.Suggest(System.String)">
            <summary>
            Gets a list of suggestions for the specified (misspelled) word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            The list of suggestions 
            </returns>
        </member>
        <member name="M:NHunspell.Hunspell.HunspellInit(System.Byte[],System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.Hunspell"/> class.
            </summary>
            <param name="affixData">
            The affix data. (aff file data) 
            </param>
            <param name="dictionaryData">
            The dictionary data. (dic file Data) 
            </param>
            <param name="key">
            The key for encrypted dictionaries. 
            </param>
        </member>
        <member name="P:NHunspell.Hunspell.NativeDllPath">
            <summary>
              Gets or sets the path to the native Hunspell DLLs.
            </summary>
            <value> The Path (without file name) </value>
            <remarks>
              <para>This property can only be set before the first use of NHunspell.</para> <para>NHunspell uses specialized DLLs with platform specific names. 
                                                                                              Hunspellx86.dll is the 32Bit X86 version, Hunspellx64.dll is the 64Bit AMD64 version.</para>
            </remarks>
        </member>
        <member name="P:NHunspell.Hunspell.IsDisposed">
            <summary>
            Gets a value indicating whether is disposed.
            </summary>
        </member>
        <member name="T:NHunspell.ThesResult">
            <summary>
              Holds the result of a <see cref="T:NHunspell.MyThes"/> synonym lookup
            </summary>
        </member>
        <member name="F:NHunspell.ThesResult.generatedByStem">
            <summary>
              The generated by stem.
            </summary>
        </member>
        <member name="F:NHunspell.ThesResult.meanings">
            <summary>
              The meanings.
            </summary>
        </member>
        <member name="M:NHunspell.ThesResult.#ctor(System.Collections.Generic.List{NHunspell.ThesMeaning},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.ThesResult"/> class.
            </summary>
            <param name="meanings">
            The meanings. 
            </param>
            <param name="generatedByStem">
            if set to <c>true</c> , the meanings are generated by word stemming. 
            </param>
        </member>
        <member name="P:NHunspell.ThesResult.IsGenerated">
            <summary>
              Gets a value indicating whether the meanings are generated by word stemming.
            </summary>
            <value> <c>true</c> if the meanings are generated by word stemming; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:NHunspell.ThesResult.Meanings">
            <summary>
              Gets the meanings.
            </summary>
            <value> The meanings. </value>
        </member>
        <member name="T:NHunspell.Hyphen">
            <summary>
              Hyphenation functions.
            </summary>
        </member>
        <member name="F:NHunspell.Hyphen.nativeDllIsReferenced">
            <summary>
            The native dll is referenced.
            </summary>
        </member>
        <member name="F:NHunspell.Hyphen.unmanagedHandle">
            <summary>
              The handle to the unmanaged Hyphen object
            </summary>
        </member>
        <member name="M:NHunspell.Hyphen.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:NHunspell.Hyphen"/> class.
            </summary>
        </member>
        <member name="M:NHunspell.Hyphen.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.Hyphen"/> class.
            </summary>
            <param name="dictFile">
            The dictionary file. 
            </param>
        </member>
        <member name="M:NHunspell.Hyphen.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.Hyphen"/> class.
            </summary>
            <param name="dictFileData">
            The dictionary file data. 
            </param>
        </member>
        <member name="M:NHunspell.Hyphen.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:NHunspell.Hyphen.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="callFromDispose">
            The call From Dispose.
            </param>
        </member>
        <member name="M:NHunspell.Hyphen.Hyphenate(System.String)">
            <summary>
            Hyphenates the specified word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            A <see cref="T:NHunspell.HyphenResult"/> object with data for simple and complex hyphenation 
            </returns>
        </member>
        <member name="M:NHunspell.Hyphen.Load(System.String)">
            <summary>
            Loads the specified dictionary file.
            </summary>
            <param name="dictFile">
            The dictionary file. 
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
            </exception>
        </member>
        <member name="M:NHunspell.Hyphen.Load(System.Byte[])">
            <summary>
            Loads the specified dictionary file data.
            </summary>
            <param name="dictFileData">
            The dictionary file data. 
            </param>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:NHunspell.Hyphen.Init(System.Byte[])">
            <summary>
            The init.
            </summary>
            <param name="dictionaryData">
            The dictionary data. 
            </param>
        </member>
        <member name="P:NHunspell.Hyphen.NativeDllPath">
            <summary>
              Gets or sets the path to the native Hunspell DLLs.
            </summary>
            <value> The Path (without file name) </value>
            <remarks>
              <para>This property can only be set before the first use of NHunspell.</para> <para>NHunspell uses specialized DLLs with platform specific names. 
                                                                                              Hunspellx86.dll is the 32Bit X86 version, Hunspellx64.dll is the 64Bit AMD64 version.</para>
            </remarks>
        </member>
        <member name="P:NHunspell.Hyphen.IsDisposed">
            <summary>
            Gets a value indicating whether is disposed.
            </summary>
        </member>
        <member name="T:NHunspell.ThesMeaning">
            <summary>
              Holds a meaning and its synonyms
            </summary>
        </member>
        <member name="F:NHunspell.ThesMeaning.description">
            <summary>
              The description.
            </summary>
        </member>
        <member name="F:NHunspell.ThesMeaning.synonyms">
            <summary>
              The synonyms.
            </summary>
        </member>
        <member name="M:NHunspell.ThesMeaning.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.ThesMeaning"/> class.
            </summary>
            <param name="description">
            The meaning description. 
            </param>
            <param name="synonyms">
            The synonyms for this meaning. 
            </param>
        </member>
        <member name="P:NHunspell.ThesMeaning.Description">
            <summary>
              Gets the description of the meaning.
            </summary>
            <value> The description. </value>
        </member>
        <member name="P:NHunspell.ThesMeaning.Synonyms">
            <summary>
              Gets the synonyms of the meaning.
            </summary>
            <value> The synonyms. </value>
        </member>
        <member name="T:NHunspell.LanguageConfig">
            <summary>
              provides configuration data for a specific language like the open office dictionaries.
            </summary>
        </member>
        <member name="F:NHunspell.LanguageConfig.hunspellAffFile">
            <summary>
              The hunspell aff file.
            </summary>
        </member>
        <member name="F:NHunspell.LanguageConfig.hunspellDictFile">
            <summary>
              The hunspell dict file.
            </summary>
        </member>
        <member name="F:NHunspell.LanguageConfig.hyphenDictFile">
            <summary>
              The hyphen dict file.
            </summary>
        </member>
        <member name="F:NHunspell.LanguageConfig.languageCode">
            <summary>
              The language code.
            </summary>
        </member>
        <member name="F:NHunspell.LanguageConfig.myThesDatFile">
            <summary>
              The my thes dat file.
            </summary>
        </member>
        <member name="F:NHunspell.LanguageConfig.myThesIdxFile">
            <summary>
              The my thes idx file.
            </summary>
        </member>
        <member name="F:NHunspell.LanguageConfig.processors">
            <summary>
              The processors.
            </summary>
        </member>
        <member name="P:NHunspell.LanguageConfig.HunspellAffFile">
            <summary>
              Gets or sets the hunspell affix file.
            </summary>
            <value> The hunspell aff file. </value>
        </member>
        <member name="P:NHunspell.LanguageConfig.HunspellDictFile">
            <summary>
              Gets or sets the hunspell dictionary file.
            </summary>
            <value> The hunspell dict file. </value>
        </member>
        <member name="P:NHunspell.LanguageConfig.HunspellKey">
            <summary>
              Gets or sets the key for encrypted dictionaries.
            </summary>
            <value> The hunspell key. </value>
        </member>
        <member name="P:NHunspell.LanguageConfig.HyphenDictFile">
            <summary>
              Gets or sets the hyphen dictionary file.
            </summary>
            <value> The hyphen dict file. </value>
        </member>
        <member name="P:NHunspell.LanguageConfig.LanguageCode">
            <summary>
              Gets or sets the language code.
            </summary>
            <value> The language code. </value>
        </member>
        <member name="P:NHunspell.LanguageConfig.MyThesDatFile">
            <summary>
              Gets or sets MYThes data file.
            </summary>
            <value> My thes dat file. </value>
        </member>
        <member name="P:NHunspell.LanguageConfig.Processors">
            <summary>
              Gets or sets the processors (cores) used by the <see cref="T:NHunspell.SpellFactory"/> .
            </summary>
            <value> The processors. </value>
        </member>
        <member name="T:NHunspell.SpellEngine">
            <summary>
              Holds <see cref="T:NHunspell.SpellFactory"/> objects for different languages. Allows thread save spell checking
            </summary>
        </member>
        <member name="F:NHunspell.SpellEngine.dictionaryLock">
            <summary>
              The dictionary lock.
            </summary>
        </member>
        <member name="F:NHunspell.SpellEngine.languages">
            <summary>
              The languages.
            </summary>
        </member>
        <member name="F:NHunspell.SpellEngine.processors">
            <summary>
              The processors.
            </summary>
        </member>
        <member name="M:NHunspell.SpellEngine.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:NHunspell.SpellEngine"/> class.
            </summary>
        </member>
        <member name="M:NHunspell.SpellEngine.AddLanguage(NHunspell.LanguageConfig)">
            <summary>
            Adds the language.
            </summary>
            <param name="config">
            The language configuration. 
            </param>
        </member>
        <member name="M:NHunspell.SpellEngine.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:NHunspell.SpellEngine.IsDisposed">
            <summary>
              Gets a value indicating whether this instance is disposed.
            </summary>
            <value> <c>true</c> if this instance is disposed; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:NHunspell.SpellEngine.Processors">
            <summary>
              Gets or sets the used processors (cores).
            </summary>
            <value> The processors (cores). </value>
        </member>
        <member name="P:NHunspell.SpellEngine.Item(System.String)">
            <summary>
            Gets the <see cref="T:NHunspell.SpellFactory"/> with the specified language.
            </summary>
            <param name="language">
            The language.
            </param>
            <value>
            the language 
            </value>
            <returns>
            The <see cref="T:NHunspell.SpellFactory"/>.
            </returns>
        </member>
        <member name="T:NHunspell.HyphenResult">
            <summary>
              Holds the result of a hyphenation with <see cref="T:NHunspell.Hyphen"/> .
            </summary>
        </member>
        <member name="F:NHunspell.HyphenResult.cut">
            <summary>
              The cut.
            </summary>
        </member>
        <member name="F:NHunspell.HyphenResult.points">
            <summary>
              The points.
            </summary>
        </member>
        <member name="F:NHunspell.HyphenResult.pos">
            <summary>
              The pos.
            </summary>
        </member>
        <member name="F:NHunspell.HyphenResult.rep">
            <summary>
              The rep.
            </summary>
        </member>
        <member name="F:NHunspell.HyphenResult.word">
            <summary>
              The word.
            </summary>
        </member>
        <member name="M:NHunspell.HyphenResult.#ctor(System.String,System.Byte[],System.String[],System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.HyphenResult"/> class.
            </summary>
            <param name="hyphenatedWord">
            The hyphenated word. 
            </param>
            <param name="hyphenationPoints">
            The hyphenation points. 
            </param>
            <param name="hyphenationRep">
            The hyphenation rep. 
            </param>
            <param name="hyphenationPos">
            The hyphenation pos. 
            </param>
            <param name="hyphenationCut">
            The hyphenation cut. 
            </param>
        </member>
        <member name="P:NHunspell.HyphenResult.HyphenatedWord">
            <summary>
              Gets the hyphenated word.
            </summary>
            <remarks>
              The hyphentaion points are marked with a equal sign '='.
            </remarks>
            <value> The hyphenated word. </value>
        </member>
        <member name="P:NHunspell.HyphenResult.HyphenationCuts">
            <summary>
              Gets the hyphenation cuts.
            </summary>
            <value> The hyphenation cuts. </value>
        </member>
        <member name="P:NHunspell.HyphenResult.HyphenationPoints">
            <summary>
              Gets the hyphenation points.
            </summary>
            <value> The hyphenation points. </value>
        </member>
        <member name="P:NHunspell.HyphenResult.HyphenationPositions">
            <summary>
              Gets the hyphenation positions.
            </summary>
            <value> The hyphenation positions. </value>
        </member>
        <member name="P:NHunspell.HyphenResult.HyphenationReplacements">
            <summary>
              Gets the hyphenation replacements.
            </summary>
            <value> The hyphenation replacements. </value>
        </member>
        <member name="T:NHunspell.SpellFactory">
            <summary>
              Enables spell checking, hyphenation and thesaurus based synonym lookup in a thread safe manner.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.processors">
            <summary>
              The processors.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.disposed">
            <summary>
              The disposed.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.hunspellSemaphore">
            <summary>
              The hunspell semaphore.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.hunspells">
            <summary>
              The hunspells.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.hyphenSemaphore">
            <summary>
              The hyphen semaphore.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.hyphens">
            <summary>
              The hyphens.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.myThesSemaphore">
            <summary>
              The my thes semaphore.
            </summary>
        </member>
        <member name="F:NHunspell.SpellFactory.myTheses">
            <summary>
              The my theses.
            </summary>
        </member>
        <member name="M:NHunspell.SpellFactory.#ctor(NHunspell.LanguageConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.SpellFactory"/> class.
            </summary>
            <param name="config">
            The configuration of the language. 
            </param>
        </member>
        <member name="M:NHunspell.SpellFactory.Analyze(System.String)">
            <summary>
            Analyzes the specified word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            List of strings with the morphology. One string per word stem 
            </returns>
        </member>
        <member name="M:NHunspell.SpellFactory.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NHunspell.SpellFactory.Generate(System.String,System.String)">
            <summary>
            Generates the specified word by example.
            </summary>
            <param name="word">
            The word. 
            </param>
            <param name="sample">
            The sample. 
            </param>
            <returns>
            List of generated words, one per word stem 
            </returns>
        </member>
        <member name="M:NHunspell.SpellFactory.Hyphenate(System.String)">
            <summary>
            Hyphenates the specified word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            the result of the hyphenation 
            </returns>
        </member>
        <member name="M:NHunspell.SpellFactory.LookupSynonyms(System.String,System.Boolean)">
            <summary>
            Look up the synonyms for the word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <param name="useGeneration">
            if set to <c>true</c> use generation to get synonyms over the word stem. 
            </param>
            <returns>
            The <see cref="T:NHunspell.ThesResult"/>.
            </returns>
        </member>
        <member name="M:NHunspell.SpellFactory.Spell(System.String)">
            <summary>
            Spell check the specified word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            true if word is correct, otherwise false. 
            </returns>
        </member>
        <member name="M:NHunspell.SpellFactory.Stem(System.String)">
            <summary>
            Stems the specified word.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            list of word stems 
            </returns>
        </member>
        <member name="M:NHunspell.SpellFactory.Suggest(System.String)">
            <summary>
            The suggest.
            </summary>
            <param name="word">
            The word. 
            </param>
            <returns>
            The <see cref="!:List"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            </exception>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="P:NHunspell.SpellFactory.IsDisposed">
            <summary>
              Gets a value indicating whether this instance is disposed.
            </summary>
            <value> <c>true</c> if this instance is disposed; otherwise, <c>false</c> . </value>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll">
            <summary>
              The marshal hunspell dll.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellAdd">
            <summary>
              The hunspell add.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellAddWithAffix">
            <summary>
              The hunspell add with affix.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellAnalyze">
            <summary>
              The hunspell analyze.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellFree">
            <summary>
              The hunspell free.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellGenerate">
            <summary>
              The hunspell generate.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellInit">
            <summary>
              The hunspell init.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellRemove">
            <summary>
            The hunspell remove.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellSpell">
            <summary>
              The hunspell spell.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellStem">
            <summary>
              The hunspell stem.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HunspellSuggest">
            <summary>
              The hunspell suggest.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HyphenFree">
            <summary>
              The hyphen free.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HyphenHyphenate">
            <summary>
              The hyphen hyphenate.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.HyphenInit">
            <summary>
              The hyphen init.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.nativeDllReferenceCountLock">
            <summary>
            The native dll reference count lock.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.dllHandle">
            <summary>
              The dll handle.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.nativeDLLPath">
            <summary>
              The native dll path.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.nativeDllReferenceCount">
            <summary>
            The native dll reference count.
            </summary>
        </member>
        <member name="M:NHunspell.MarshalHunspellDll.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            The get proc address.
            </summary>
            <param name="hModule">
            The h module. 
            </param>
            <param name="procName">
            The proc name. 
            </param>
            <returns>
            The <see cref="T:System.IntPtr"/>.
            </returns>
        </member>
        <member name="M:NHunspell.MarshalHunspellDll.GetSystemInfo(NHunspell.MarshalHunspellDll.SYSTEM_INFO@)">
            <summary>
            The get system info.
            </summary>
            <param name="lpSystemInfo">
            The lp system info. 
            </param>
        </member>
        <member name="M:NHunspell.MarshalHunspellDll.LoadLibrary(System.String)">
            <summary>
            The load library.
            </summary>
            <param name="fileName">
            The file name. 
            </param>
            <returns>
            The <see cref="T:System.IntPtr"/>.
            </returns>
        </member>
        <member name="M:NHunspell.MarshalHunspellDll.ReferenceNativeHunspellDll">
            <summary>
              References the native hunspell DLL.
            </summary>
            <exception cref="T:System.DllNotFoundException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:NHunspell.MarshalHunspellDll.UnReferenceNativeHunspellDll">
            <summary>
            The un reference native hunspell dll.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:NHunspell.MarshalHunspellDll.FreeLibrary(System.IntPtr)">
            <summary>
            The free library.
            </summary>
            <param name="hModule">
            The h module. 
            </param>
            <returns>
            The free library. 
            </returns>
        </member>
        <member name="M:NHunspell.MarshalHunspellDll.GetDelegate(System.String,System.Type)">
            <summary>
            The get delegate.
            </summary>
            <param name="procName">
            The proc name. 
            </param>
            <param name="delegateType">
            The delegate type. 
            </param>
            <returns>
            The <see cref="T:System.Delegate"/>.
            </returns>
            <exception cref="T:System.EntryPointNotFoundException">
            </exception>
        </member>
        <member name="P:NHunspell.MarshalHunspellDll.NativeDLLPath">
            <summary>
              Gets or sets NativeDLLPath.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellAddDelegate">
            <summary>
              The hunspell add delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellAddWithAffixDelegate">
            <summary>
              The hunspell add with affix delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
            <param name="example"> The example. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellAnalyzeDelegate">
            <summary>
              The hunspell analyze delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellFreeDelegate">
            <summary>
              The hunspell free delegate.
            </summary>
            <param name="handle"> The handle. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellGenerateDelegate">
            <summary>
              The hunspell generate delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
            <param name="word2"> The word 2. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellInitDelegate">
            <summary>
              The hunspell init delegate.
            </summary>
            <param name="affixData"> The affix data. </param>
            <param name="affixDataSize"> The affix data size. </param>
            <param name="dictionaryData"> The dictionary data. </param>
            <param name="dictionaryDataSize"> The dictionary data size. </param>
            <param name="key"> The key. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellRemoveDelegate">
            <summary>
            The hunspell remove delegate.
            </summary>
            <param name="handle">
            The handle.
            </param>
            <param name="word">
            The word.
            </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellSpellDelegate">
            <summary>
              The hunspell spell delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellStemDelegate">
            <summary>
              The hunspell stem delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HunspellSuggestDelegate">
            <summary>
              The hunspell suggest delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HyphenFreeDelegate">
            <summary>
              The hyphen free delegate.
            </summary>
            <param name="handle"> The handle. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HyphenHyphenateDelegate">
            <summary>
              The hyphen hyphenate delegate.
            </summary>
            <param name="handle"> The handle. </param>
            <param name="word"> The word. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.HyphenInitDelegate">
            <summary>
              The hyphen init delegate.
            </summary>
            <param name="dictData"> The dict data. </param>
            <param name="dictDataSize"> The dict data size. </param>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE">
            <summary>
              The processo r_ architecture.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.Intel">
            <summary>
              The intel.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.MIPS">
            <summary>
              The mips.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.Alpha">
            <summary>
              The alpha.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.PPC">
            <summary>
              The ppc.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.SHX">
            <summary>
              The shx.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.ARM">
            <summary>
              The arm.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.IA64">
            <summary>
              The i a 64.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.Alpha64">
            <summary>
              The alpha 64.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.Amd64">
            <summary>
              The amd 64.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.PROCESSOR_ARCHITECTURE.Unknown">
            <summary>
              The unknown.
            </summary>
        </member>
        <member name="T:NHunspell.MarshalHunspellDll.SYSTEM_INFO">
            <summary>
              The syste m_ info.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.wProcessorArchitecture">
            <summary>
              The w processor architecture.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.wReserved">
            <summary>
              The w reserved.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.dwPageSize">
            <summary>
              The dw page size.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.lpMinimumApplicationAddress">
            <summary>
              The lp minimum application address.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.lpMaximumApplicationAddress">
            <summary>
              The lp maximum application address.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.dwActiveProcessorMask">
            <summary>
              The dw active processor mask.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.dwNumberOfProcessors">
            <summary>
              The dw number of processors.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.dwProcessorType">
            <summary>
              The dw processor type.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.dwAllocationGranularity">
            <summary>
              The dw allocation granularity.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.dwProcessorLevel">
            <summary>
              The dw processor level.
            </summary>
        </member>
        <member name="F:NHunspell.MarshalHunspellDll.SYSTEM_INFO.dwProcessorRevision">
            <summary>
              The dw processor revision.
            </summary>
        </member>
        <member name="T:NHunspell.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NHunspell.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NHunspell.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NHunspell.Resources.HunspellNotAvailabeForProcessorArchitectureMessage">
            <summary>
              Looks up a localized string similar to NHunspell is not available for ProcessorArchitecture: .
            </summary>
        </member>
        <member name="P:NHunspell.Resources.HunspellX64DllName">
            <summary>
              Looks up a localized string similar to Hunspellx64.dll.
            </summary>
        </member>
        <member name="P:NHunspell.Resources.HunspellX64DllNotFoundMessage">
            <summary>
              Looks up a localized string similar to Hunspell AMD 64Bit DLL not found: {0}.
            </summary>
        </member>
        <member name="P:NHunspell.Resources.HunspellX86DllName">
            <summary>
              Looks up a localized string similar to Hunspellx86.dll.
            </summary>
        </member>
        <member name="P:NHunspell.Resources.HunspellX86DllNotFoundMessage">
            <summary>
              Looks up a localized string similar to Hunspell Intel 32Bit DLL not found: {0}.
            </summary>
        </member>
        <member name="T:NHunspell.MyThes">
            <summary>
              provides thesaurus functions to get synonyms for a word
            </summary>
        </member>
        <member name="F:NHunspell.MyThes.dictionaryLock">
            <summary>
              The dictionary lock.
            </summary>
        </member>
        <member name="F:NHunspell.MyThes.synonyms">
            <summary>
              The synonyms.
            </summary>
        </member>
        <member name="M:NHunspell.MyThes.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:NHunspell.MyThes"/> class.
            </summary>
        </member>
        <member name="M:NHunspell.MyThes.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.MyThes"/> class.
            </summary>
            <param name="datBytes">
            The thesaurus dictionary bytes. 
            </param>
        </member>
        <member name="M:NHunspell.MyThes.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.MyThes"/> class.
            </summary>
            <param name="datFile">
            The path to the thesaurus dictionary file. 
            </param>
        </member>
        <member name="M:NHunspell.MyThes.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHunspell.MyThes"/> class.
            </summary>
            <param name="idxFile">
            The thesuarus idx file. 
            </param>
            <param name="datFile">
            The thesaurus dat file. 
            </param>
            <remarks>
            This function is obsolete, idx File is not longer needed, <see cref="T:NHunspell.MyThes"/> works now completely in memory
            </remarks>
        </member>
        <member name="M:NHunspell.MyThes.GetEncoding(System.String)">
            <summary>
            Gets the .NET encoding for the specified dictionary encoding.
            </summary>
            <param name="encoding">
            The encoding. 
            </param>
            <returns>
            The <see cref="T:System.Text.Encoding"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:NHunspell.MyThes.Load(System.Byte[])">
            <summary>
            Loads the thesaurus from a in memory dictionary.
            </summary>
            <param name="dictionaryBytes">
            The dictionary Bytes. 
            </param>
        </member>
        <member name="M:NHunspell.MyThes.Load(System.String)">
            <summary>
            Loads the thesaurus from the specified dictionary file.
            </summary>
            <param name="dictionaryFile">
            The dictionary file. 
            </param>
        </member>
        <member name="M:NHunspell.MyThes.Lookup(System.String)">
            <summary>
            Lookups synonyms for the specified word.
            </summary>
            <param name="word">
            The word to lookup 
            </param>
            <returns>
            list of synonyms 
            </returns>
        </member>
        <member name="M:NHunspell.MyThes.Lookup(System.String,NHunspell.Hunspell)">
            <summary>
            Lookups the specified word with word stemming and generation
            </summary>
            <param name="word">
            The word. 
            </param>
            <param name="stemming">
            The <see cref="T:NHunspell.Hunspell"/> object for stemming and generation. 
            </param>
            <returns>
            The <see cref="T:NHunspell.ThesResult"/>.
            </returns>
        </member>
        <member name="M:NHunspell.MyThes.GetCrLfLength(System.Byte[],System.Int32)">
            <summary>
            The get cr lf length.
            </summary>
            <param name="buffer">
            The buffer. 
            </param>
            <param name="pos">
            The pos. 
            </param>
            <returns>
            The get cr lf length. 
            </returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:NHunspell.MyThes.GetLineLength(System.Byte[],System.Int32)">
            <summary>
            Gets the length of the line.
            </summary>
            <param name="buffer">
            The buffer. 
            </param>
            <param name="start">
            The start. 
            </param>
            <returns>
            The get line length. 
            </returns>
        </member>
    </members>
</doc>
